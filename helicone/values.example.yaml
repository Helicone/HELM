################################################################################
#
#                       HELICONE CUSTOMIZATION EXAMPLE
#              (SHOWCASES AVAILABLE CONFIGURATION OPTIONS)
#
################################################################################

# Global configuration
global:
  # Use empty string for cluster default or specify a storage class
  defaultStorageClass: "premium-rwo"

# Global environment variables for all components
globalEnvVars: {}
  # S3 is always required - here's an example of creating the required S3 secret:
  # kubectl create secret generic helicone-s3 \
  #   --from-literal=access_key=YOUR_ACCESS_KEY \
  #   --from-literal=secret_key=YOUR_SECRET_KEY \
  #   --from-literal=bucket_name=your-bucket-name \
  #   --from-literal=endpoint=https://storage.googleapis.com \
  #   --namespace helicone

# Helicone Application Configuration
helicone:
  # Web Frontend Configuration
  web:
    enabled: true
    image:
      repository: helicone/web
      pullPolicy: IfNotPresent
      tag: "v2025.03.05-1"
    replicaCount: 2 # Scale web tier for high availability
    service:
      type: ClusterIP
      port: 3000
    # Example resource limits and requests
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 512Mi
    # Configure public Supabase URL (match your domain)
    supabasePublicUrl: "https://helicone-test.com/supabase"
    ingress:
      enabled: true
      ingressClassName: "nginx"
      annotations:
        kubernetes.io/ingress.class: nginx
        cert-manager.io/cluster-issuer: letsencrypt-prod
        # Additional ingress annotations you might need
        nginx.ingress.kubernetes.io/proxy-body-size: "100m"
      tls:
        - secretName: helicone-tls
          hosts:
            - "helicone-test.com"
      hosts:
        - host: "helicone-test.com"
          paths:
            - path: /
              pathType: ImplementationSpecific
              backend:
                serviceName: helicone-web
                servicePort: 3000
    # Database migration components
    supabaseMigrationRunner:
      enabled: true
      image:
        repository: helicone/supabase-migration-runner
        pullPolicy: IfNotPresent
        tag: "v2025.03.05-1"
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
    clickhouseMigrationRunner:
      image:
        repository: helicone/clickhouse-migration-runner
        pullPolicy: IfNotPresent
        tag: "v2025.03.05-1"
      resources:
        limits:
          cpu: 500m
          memory: 512Mi

  # OpenAI API Proxy
  oai:
    image:
      repository: helicone/worker
      pullPolicy: IfNotPresent
      tag: "v2025.03.05-1"
    replicaCount: 2 # Scale for high throughput
    service:
      type: ClusterIP
      port: 8787
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 512Mi
    # You can define custom environment variables
    extraEnvVars:
      - name: NODE_ENV
        value: "production"
      - name: DEBUG
        value: "false"
    # Ingress configuration for OpenAI API Proxy
    ingress:
      enabled: false
      ingressClassName: "nginx"
      annotations: {}
      tls: []
      hosts: []

  # Helicone API
  api:
    image:
      repository: helicone/worker
      pullPolicy: IfNotPresent
      tag: "v2025.03.05-1"
    replicaCount: 2
    service:
      type: ClusterIP
      port: 8787
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 512Mi
    # Ingress configuration for Helicone API
    ingress:
      enabled: false
      ingressClassName: "nginx" 
      annotations: {}
      tls: []
      hosts: []

  # ClickHouse for Analytics
  clickhouse:
    image:
      repository: clickhouse/clickhouse-server
      pullPolicy: IfNotPresent
      tag: "23.4.2.11"
    replicaCount: 1
    service:
      type: ClusterIP
      port: 8123
    # Customize persistence for production use
    persistence:
      size: 100Gi # Larger disk for production
      storageClass: "premium-rwo" # Use high-performance storage
    resources:
      limits:
        cpu: 4
        memory: 8Gi
      requests:
        cpu: 1
        memory: 4Gi

  # Jawn Service (Gateway/Router)
  jawn:
    image:
      repository: helicone/jawn
      pullPolicy: IfNotPresent
      tag: "v2025.03.10"
    replicaCount: 2 # Scale for higher throughput
    service:
      type: ClusterIP
      port: 8585
    publicUrl: "https://helicone-test.com/jawn"
    # Environmental variables for Jawn service
    extraEnvVars:
      # Disable prompt security for environments where it's not needed
      - name: "ENABLE_PROMPT_SECURITY"
        value: "false"
      # Example of configuring Azure environment for experiments
      - name: "AZURE_API_VERSION"
        value: "2023-05-15"
      - name: "AZURE_DEPLOYMENT_NAME"
        value: "gpt-35-turbo"
      - name: "AZURE_BASE_URL"
        value: "https://your-azure-endpoint.openai.azure.com"
      # You would typically use secrets for API keys
      # - name: "AZURE_API_KEY"
      #   valueFrom:
      #     secretKeyRef:
      #       name: azure-api-keys
      #       key: api-key
    resources:
      limits:
        cpu: 2
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi

################################################################################
#
#                                 SUPABASE
#
################################################################################
supabase:
  studio:
    enabled: true
    extraEnvVars:
      - name: HOSTNAME
        value: "0.0.0.0"
    # Example of exposing Supabase Studio publicly
    ingress:
      enabled: true
      hostname: "studio-helicone-test.com"
      annotations:
        kubernetes.io/ingress.class: nginx
        cert-manager.io/cluster-issuer: letsencrypt-prod
      tls: true
    service:
      type: ClusterIP
      ports:
        http: 80
  storage:
    persistence:
      enabled: false
      storageClass: "premium-rwo"
  postgresql:
    auth:
      username: "postgres"
      postgresPassword: "postgres" # Use a secure password in production
    # Configure PostgreSQL persistence
    primary:
      persistence:
        storageClass: "premium-rwo"
        size: 20Gi # Larger size for production
    # Example of configuring PostgreSQL resources
    resources:
      requests:
        memory: 2Gi
        cpu: "1"
      limits:
        memory: 4Gi
        cpu: "2"
  kong:
    ingress:
      enabled: false
      hostname: "supabase-helicone-test.com"
    service:
      type: ClusterIP
  auth:
    image:
      repository: supabase/gotrue
      tag: v2.91.0
  # Production should use secure keys - these are examples only
  jwt:
    secret: "your-secure-jwt-secret-minimum-32-characters"
    anonKey: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ewogICAgInJvbGUiOiAiYW5vbiIsCiAgICAiaXNzIjogInN1cGFiYXNlIiwKICAgICJpYXQiOiAxNjc1NDAwNDAwLAogICAgImV4cCI6IDE4MzMxNjY4MDAKfQ.ztuiBzjaVoFHmoljUXWmnuDN6QU2WgJICeqwyzyZO88"
    serviceKey: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ewogICAgInJvbGUiOiAic2VydmljZV9yb2xlIiwKICAgICJpc3MiOiAic3VwYWJhc2UiLAogICAgImlhdCI6IDE2NzU0MDA0MDAsCiAgICAiZXhwIjogMTgzMzE2NjgwMAp9.qNsmXzz4tG7eqJPh1Y58DbtIlJBauwpqx39UF-MwM8k"

################################################################################
#
#                          ADDITIONAL RESOURCES
#
################################################################################
extraObjects:
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: helicone-services-ingress
      annotations:
        kubernetes.io/ingress.class: nginx
        cert-manager.io/cluster-issuer: letsencrypt-prod
        # URL rewriting - this captures the path segment after the prefix
        nginx.ingress.kubernetes.io/rewrite-target: /$2
        # Allow large request bodies for model inputs
        nginx.ingress.kubernetes.io/proxy-body-size: "100m"
        # HTTPS redirection configuration
        nginx.ingress.kubernetes.io/ssl-redirect: "false"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
        # Additional CORS settings if needed
        # nginx.ingress.kubernetes.io/enable-cors: "true"
        # nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
        # nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    spec:
      rules:
        - host: "helicone-test.com"
          http:
            paths:
              - backend:
                  service:
                    name: helicone-jawn
                    port:
                      number: 8585
                path: /jawn(/|$)(.*)
                pathType: ImplementationSpecific
              - backend:
                  service:
                    name: helicone-oai
                    port:
                      number: 8787
                path: /oai(/|$)(.*)
                pathType: ImplementationSpecific
              - backend:
                  service:
                    name: helicone-api
                    port:
                      number: 8787
                path: /api2(/|$)(.*)
                pathType: ImplementationSpecific
              - backend:
                  service:
                    name: helicone-kong
                    port:
                      number: 80
                path: /supabase(/|$)(.*)
                pathType: ImplementationSpecific
      tls:
        - hosts:
            - "helicone-test.com"
          secretName: helicone-tls